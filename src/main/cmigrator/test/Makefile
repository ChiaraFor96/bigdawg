# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
#GTEST_DIR = ${GTEST_DIR}

# Where to find user code.
ODIR=../obj
ODIR_ATTRIBUTE=$(ODIR)/attribute

USER_DIR = ../samples

HEADERS=../include
SOURCES=../src
TESTS_DIR=../test

ATTRIBUTE_HEADER = $(HEADERS)/attribute
ATTRIBUTE_SRC = $(SOURCES)/attribute
ATTRIBUTE_TEST = $(TESTS_DIR)/attribute

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
IDIR=../include # you have to add this because otherwise makefile searches only
# in the same directory where *.cc or *.cpp files are stored (our placement of header files is clean)
CPPFLAGS += -isystem $(GTEST_DIR)/include -I$(IDIR) -mlong-double-64 -mpc64 -std=c++11 -L/usr/include/boost

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread # -O2

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = attribute_unittest sample1_unittest typeAttributeMap_unittest buffer_unittest

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : $(TESTS)

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o
	rm -f $(ODIR)/*.o
	rm -f $(ODIR_ATTRIBUTE)/*.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

sample1.o : $(USER_DIR)/sample1.cc $(USER_DIR)/sample1.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/sample1.cc

sample1_unittest.o : $(USER_DIR)/sample1_unittest.cc \
                     $(USER_DIR)/sample1.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/sample1_unittest.cc

sample1_unittest : sample1.o sample1_unittest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@


# tests for attributes
$(ODIR_ATTRIBUTE)/attribute.o: $(ATTRIBUTE_SRC)/attribute.cpp $(warning $(ODIR_ATTRIBUTE)) $(warning $(ATTRIBUTE_HEADER)) $(ATTRIBUTE_HEADER)/attribute.h $(GTEST_HEADERS)
	$(CXX) -c $< -o $@ $(CPPFLAGS) $(CXXFLAGS)

attribute_unittest.o : $(ATTRIBUTE_TEST)/attribute_unittest.cc \
		       $(ATTRIBUTE_HEADER)/attribute.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $<

attribute_unittest : $(ODIR_ATTRIBUTE)/attribute.o attribute_unittest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

# tests for typeAttributeMap
$(ODIR)/typeAttributeMap.o: $(SOURCES)/typeAttributeMap.cpp $(HEADERS)/typeAttributeMap.h $(warning $(ATTRIBUTE_HEADER)) $(ATTRIBUTE_HEADER)/attribute.h $(ATTRIBUTE_SRC)/attribute.cpp $(HEADERS)/dataMigratorExceptions.h $(GTEST_HEADERS) 
	$(CXX) -c $< -o $@ $(CPPFLAGS) $(CXXFLAGS)

typeAttributeMap_unittest.o : $(TESTS_DIR)/typeAttributeMap_unittest.cc $(HEADERS)/typeAttributeMap.h \
		       $(ATTRIBUTE_HEADER)/attribute.h $(HEADERS)/dataMigratorExceptions.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@

typeAttributeMap_unittest : $(ODIR_ATTRIBUTE)/attribute.o $(ODIR)/typeAttributeMap.o typeAttributeMap_unittest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

# tests for typeAttributeMap
$(ODIR)/typeAttributeMap.o: $(SOURCES)/typeAttributeMap.cpp $(HEADERS)/typeAttributeMap.h $(warning $(ATTRIBUTE_HEADER)) $(ATTRIBUTE_HEADER)/attribute.h $(ATTRIBUTE_SRC)/attribute.cpp $(HEADERS)/dataMigratorExceptions.h $(GTEST_HEADERS) 
	$(CXX) -c $< -o $@ $(CPPFLAGS) $(CXXFLAGS)

typeAttributeMap_unittest.o : $(TESTS_DIR)/typeAttributeMap_unittest.cc $(HEADERS)/typeAttributeMap.h \
		       $(ATTRIBUTE_HEADER)/attribute.h $(HEADERS)/dataMigratorExceptions.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@

typeAttributeMap_unittest : $(ODIR_ATTRIBUTE)/attribute.o $(ODIR)/typeAttributeMap.o typeAttributeMap_unittest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

# tests for typeAttributeMap
$(ODIR)/buffer.o: $(SOURCES)/buffer.c $(HEADERS)/buffer.h $(GTEST_HEADERS) 
	$(CXX) -c $< -o $@ $(CPPFLAGS) $(CXXFLAGS)

buffer_unittest.o : $(TESTS_DIR)/buffer_unittest.cc $(HEADERS)/buffer.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@

buffer_unittest : $(ODIR)/buffer.o buffer_unittest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@
